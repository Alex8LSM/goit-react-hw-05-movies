{"version":3,"file":"static/js/76.6f2c87d1.chunk.js","mappings":"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","sources":["services/film-api.jsx","webpack://goit-react-hw-05-movies/./src/views/SingleFilmView/SingleFilmView.module.css?8953","views/SingleFilmView/SingleFilmView.jsx"],"sourcesContent":["const BASE_URL = 'https://api.themoviedb.org/3';\nconst KEY = '61d280fbc4e0ab3fee827783c53f7600';\nexport const IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\n\nasync function fetchWithErrorHandling(url = '', config = {}) {\n  const response = await fetch(url, config);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('Not found'));\n}\n\nexport function fetchPopularFilmsForToday() {\n  return fetchWithErrorHandling(`${BASE_URL}/trending/all/day?api_key=${KEY}`);\n}\n\nexport function fetchFilmsByKeyWord(name) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/search/movie?api_key=${KEY}&query=${name}&page=1&include_adult=false`\n  );\n}\n\nexport function fetchPrimaryInfoAboutFilm(movie_id) {\n  return fetchWithErrorHandling(`${BASE_URL}/movie/${movie_id}?api_key=${KEY}`);\n}\n\nexport function fetchCastForFilm(movie_id) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movie_id}/credits?api_key=${KEY}`\n  );\n}\nexport function fetchReviewsForFilm(movie_id) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movie_id}/reviews?api_key=${KEY}`\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"SingleFilmView_wrapper__Exykd\",\"image\":\"SingleFilmView_image__FQJyk\",\"rating\":\"SingleFilmView_rating__OG3Se\",\"title\":\"SingleFilmView_title__36ryd\",\"subtitle\":\"SingleFilmView_subtitle__JP2uh\",\"descr\":\"SingleFilmView_descr__TLb9O\",\"genres\":\"SingleFilmView_genres__b7h7y\",\"release\":\"SingleFilmView_release__P-KGI\",\"link\":\"SingleFilmView_link__mY1T-\",\"activeLink\":\"SingleFilmView_activeLink__TjPLN SingleFilmView_link__mY1T-\"};","import { useState, useEffect, lazy, Suspense } from 'react';\n\nimport { useParams, NavLink, Route, Routes } from 'react-router-dom';\n\nimport { fetchPrimaryInfoAboutFilm, IMAGE_URL } from '../../services/film-api';\nimport s from './SingleFilmView.module.css';\nimport PendingView from '../PendingView/PendingView';\n\nconst CastView = lazy(() => import('../CastView/CastView'));\nconst ReviewView = lazy(() => import('../ReviewView/ReviewView'));\n\nexport default function SingleFilmsView() {\n  const { moviesId } = useParams();\n  const [film, setFilm] = useState(null);\n  useEffect(() => {\n    fetchPrimaryInfoAboutFilm(moviesId).then(setFilm);\n  }, [moviesId]);\n  return (\n    <>\n      {film && (\n        <>\n          <div>\n            <div className={s.wrapper}>\n              <div className={s.image__wrapper}>\n                <img\n                  className={s.image}\n                  src={`${IMAGE_URL}${film.poster_path}`}\n                  alt={film.title || film.name}\n                />\n              </div>\n              <div>\n                <h2 className={s.title}>{film.title || film.name}</h2>\n                <h3 className={s.subtitle}>Rating: </h3>\n                <p className={s.rating}>{film.vote_average}</p>\n                <h3 className={s.subtitle}>Overview</h3>\n                <p className={s.descr}>{film.overview}</p>\n                <h3 className={s.subtitle}>Release date : </h3>\n                <p className={s.release}>{film.release_date}</p>\n\n                {film.genres && (\n                  <>\n                    <h3 className={s.subtitle}>Genres</h3>\n                    <ul className={s.genres}>\n                      {film.genres.map((item, index) => (\n                        <li key={index} className={s.item}>\n                          {item.name}\n                        </li>\n                      ))}\n                    </ul>\n                  </>\n                )}\n              </div>\n            </div>\n\n            <nav>\n              <NavLink\n                to=\"cast\"\n                className={({ isActive }) => (isActive ? s.activeLink : s.link)}\n              >\n                Cast\n              </NavLink>\n              <NavLink\n                to=\"review\"\n                className={({ isActive }) => (isActive ? s.activeLink : s.link)}\n              >\n                Review\n              </NavLink>\n            </nav>\n\n            <Suspense fallback={<PendingView />}>\n              <Routes>\n                <Route path=\"cast\" element={<CastView moviesId={moviesId} />} />\n                <Route\n                  path=\"review\"\n                  element={<ReviewView movieId={moviesId} />}\n                />\n              </Routes>\n            </Suspense>\n          </div>\n        </>\n      )}\n    </>\n  );\n}\n"],"names":["BASE_URL","KEY","IMAGE_URL","fetchWithErrorHandling","url","config","fetch","response","ok","json","Promise","reject","Error","fetchPopularFilmsForToday","fetchFilmsByKeyWord","name","fetchPrimaryInfoAboutFilm","movie_id","fetchCastForFilm","fetchReviewsForFilm","CastView","lazy","ReviewView","SingleFilmsView","moviesId","useParams","useState","film","setFilm","useEffect","then","className","s","src","poster_path","alt","title","vote_average","overview","release_date","genres","map","item","index","to","isActive","Suspense","fallback","PendingView","path","element","movieId"],"sourceRoot":""}