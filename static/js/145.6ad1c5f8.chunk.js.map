{"version":3,"file":"static/js/145.6ad1c5f8.chunk.js","mappings":"8TAAMA,EAAW,+BACXC,EAAM,mCACCC,EAAY,kCAAlB,SAEQC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2GAAsCC,EAAtC,+BAA4C,GAAIC,EAAhD,+BAAyD,GAAzD,SACyBC,MAAMF,EAAKC,GADpC,YACQE,EADR,QAEkBC,GAFlB,iCAGYD,EAASE,OAHrB,gDAIMC,QAAQC,OAAO,IAAIC,MAAM,cAJ/B,2GAOO,SAASC,IACd,OAAOV,EAAuB,GAAD,OAAIH,EAAJ,qCAAyCC,IAGjE,SAASa,EAAoBC,GAClC,OAAOZ,EAAuB,GAAD,OACxBH,EADwB,iCACSC,EADT,kBACsBc,EADtB,gCAKxB,SAASC,EAA0BC,GACxC,OAAOd,EAAuB,GAAD,OAAIH,EAAJ,kBAAsBiB,EAAtB,oBAA0ChB,IAGlE,SAASiB,EAAiBD,GAC/B,OAAOd,EAAuB,GAAD,OACxBH,EADwB,kBACNiB,EADM,4BACsBhB,IAG9C,SAASkB,EAAoBF,GAClC,OAAOd,EAAuB,GAAD,OACxBH,EADwB,kBACNiB,EADM,4BACsBhB,M,kHC/BrD,EAAuB,uBAAvB,EAAqD,uBAArD,EAAmF,uB,SCMpE,SAASmB,IACtB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAMA,OAJAC,EAAAA,EAAAA,YAAU,YACRR,EAAAA,EAAAA,IAAiBG,GAASM,MAAK,SAAAC,GAAO,OAAIH,EAAQG,EAAQJ,WACzD,CAACH,KAGF,eAAIQ,UAAWC,EAAf,SACGN,EAAKO,KAAI,SAAAC,GAAM,OACd,gBAAoBH,UAAWC,EAA/B,WACE,gBACEG,IACED,EAAOE,aAAP,UAAyBhC,EAAAA,IAAzB,OAAqC8B,EAAOE,cAAiBC,EAE/DC,IAAKJ,EAAOjB,KACZsB,MAAM,MACNC,OAAO,SAET,cAAGT,UAAWC,EAAd,SAAuBE,EAAOjB,SATvBiB,EAAOO,W","sources":["services/film-api.jsx","webpack://goit-react-hw-05-movies/./src/views/CastView/CastView.module.css?64bb","views/CastView/CastView.jsx"],"sourcesContent":["const BASE_URL = 'https://api.themoviedb.org/3';\nconst KEY = '61d280fbc4e0ab3fee827783c53f7600';\nexport const IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\n\nasync function fetchWithErrorHandling(url = '', config = {}) {\n  const response = await fetch(url, config);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('Not found'));\n}\n\nexport function fetchPopularFilmsForToday() {\n  return fetchWithErrorHandling(`${BASE_URL}/trending/all/day?api_key=${KEY}`);\n}\n\nexport function fetchFilmsByKeyWord(name) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/search/movie?api_key=${KEY}&query=${name}&page=1&include_adult=false`\n  );\n}\n\nexport function fetchPrimaryInfoAboutFilm(movie_id) {\n  return fetchWithErrorHandling(`${BASE_URL}/movie/${movie_id}?api_key=${KEY}`);\n}\n\nexport function fetchCastForFilm(movie_id) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movie_id}/credits?api_key=${KEY}`\n  );\n}\nexport function fetchReviewsForFilm(movie_id) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movie_id}/reviews?api_key=${KEY}`\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"CastView_list__WgGVb\",\"item\":\"CastView_item__tn4pa\",\"name\":\"CastView_name__S9SpZ\"};","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchCastForFilm, IMAGE_URL } from '../../services/film-api';\n\nimport photo from '../../images/photo.png';\nimport s from './CastView.module.css';\n\nexport default function CastView() {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    fetchCastForFilm(movieId).then(request => setCast(request.cast));\n  }, [movieId]);\n\n  return (\n    <ul className={s.list}>\n      {cast.map(member => (\n        <li key={member.id} className={s.item}>\n          <img\n            src={\n              member.profile_path ? `${IMAGE_URL}${member.profile_path}` : photo\n            }\n            alt={member.name}\n            width=\"100\"\n            height=\"150\"\n          />\n          <p className={s.name}>{member.name}</p>\n        </li>\n      ))}\n    </ul>\n  );\n}\n"],"names":["BASE_URL","KEY","IMAGE_URL","fetchWithErrorHandling","url","config","fetch","response","ok","json","Promise","reject","Error","fetchPopularFilmsForToday","fetchFilmsByKeyWord","name","fetchPrimaryInfoAboutFilm","movie_id","fetchCastForFilm","fetchReviewsForFilm","CastView","movieId","useParams","useState","cast","setCast","useEffect","then","request","className","s","map","member","src","profile_path","photo","alt","width","height","id"],"sourceRoot":""}