{"version":3,"file":"static/js/645.bc012fc7.chunk.js","mappings":"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","sources":["services/film-api.jsx","webpack://goit-react-hw-05-movies/./src/views/ErrorView/ErrorView.module.css?5824","views/ErrorView/ErrorView.jsx","webpack://goit-react-hw-05-movies/./src/views/SingleFilmView/SingleFilmView.module.css?8953","views/SingleFilmView/SingleFilmView.jsx"],"sourcesContent":["const BASE_URL = 'https://api.themoviedb.org/3';\nconst KEY = '61d280fbc4e0ab3fee827783c53f7600';\nexport const IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\n\nasync function fetchWithErrorHandling(url = '', config = {}) {\n  const response = await fetch(url, config);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('Not found'));\n}\n\nexport function fetchPopularFilmsForToday() {\n  return fetchWithErrorHandling(`${BASE_URL}/trending/all/day?api_key=${KEY}`);\n}\n\nexport function fetchFilmsByKeyWord(name) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/search/movie?api_key=${KEY}&query=${name}&page=1&include_adult=false`\n  );\n}\n\nexport function fetchPrimaryInfoAboutFilm(movie_id) {\n  return fetchWithErrorHandling(`${BASE_URL}/movie/${movie_id}?api_key=${KEY}`);\n}\n\nexport function fetchCastForFilm(movie_id) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movie_id}/credits?api_key=${KEY}`\n  );\n}\nexport function fetchReviewsForFilm(movie_id) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movie_id}/reviews?api_key=${KEY}`\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"ErrorView_title__ym9Ef\",\"subtitle\":\"ErrorView_subtitle__1+WSk\",\"box\":\"ErrorView_box__Xk5wP\"};","import PropTypes from 'prop-types';\nimport error from '../../images/404.jpeg';\nimport s from './ErrorView.module.css';\n\nexport default function ErrorView({ message }) {\n  return (\n    <div className={s.box} role=\"alert\">\n      <p className={s.title}>Sorry, something went wrong.</p>\n      <p className={s.subtitle}>Error : {message}</p>\n      <img src={error} alt={message} />\n    </div>\n  );\n}\n\nErrorView.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"SingleFilmView_wrapper__Exykd\",\"image\":\"SingleFilmView_image__FQJyk\",\"rating\":\"SingleFilmView_rating__OG3Se\",\"title\":\"SingleFilmView_title__36ryd\",\"subtitle\":\"SingleFilmView_subtitle__JP2uh\",\"descr\":\"SingleFilmView_descr__TLb9O\",\"genres\":\"SingleFilmView_genres__b7h7y\",\"release\":\"SingleFilmView_release__P-KGI\",\"link\":\"SingleFilmView_link__mY1T-\",\"backLink\":\"SingleFilmView_backLink__Bmf-L\",\"backBtn\":\"SingleFilmView_backBtn__E11E4\",\"activeLink\":\"SingleFilmView_activeLink__TjPLN SingleFilmView_link__mY1T-\"};","import { useState, useEffect } from 'react';\nimport { useParams, NavLink, Outlet, useLocation } from 'react-router-dom';\nimport { fetchPrimaryInfoAboutFilm, IMAGE_URL } from '../../services/film-api';\nimport s from './SingleFilmView.module.css';\nimport ErrorView from '../ErrorView/ErrorView';\n\nexport default function SingleFilmsView() {\n  const { movieId } = useParams();\n  const [film, setFilm] = useState('not set');\n  const [fromLink, setfromLink] = useState('/');\n  const location = useLocation();\n  useEffect(() => {\n    fetchPrimaryInfoAboutFilm(movieId)\n      .then(setFilm)\n      .catch(err => {\n        return setFilm(null);\n      });\n  }, [movieId]);\n  useEffect(() => {\n    if (location.state) {\n      setfromLink(location.state.from);\n    }\n  }, [location.state]);\n  return (\n    <>\n      {film ? (\n        <div>\n          <nav>\n            <button className={s.backBtn}>\n              <NavLink to={fromLink} className={s.backLink}>\n                ← Go Back\n              </NavLink>\n            </button>\n          </nav>\n          <div className={s.wrapper}>\n            <div className={s.image__wrapper}>\n              <img\n                className={s.image}\n                src={`${IMAGE_URL}${film.poster_path}`}\n                alt={film.title || film.name}\n              />\n            </div>\n            <div>\n              <h2 className={s.title}>{film.title || film.name}</h2>\n              <h3 className={s.subtitle}>Rating: </h3>\n              <p className={s.rating}>{film.vote_average}</p>\n              <h3 className={s.subtitle}>Overview</h3>\n              <p className={s.descr}>{film.overview}</p>\n              <h3 className={s.subtitle}>Release date : </h3>\n              <p className={s.release}>{film.release_date}</p>\n\n              {film.genres && (\n                <>\n                  <h3 className={s.subtitle}>Genres</h3>\n                  <ul className={s.genres}>\n                    {film.genres.map((item, index) => (\n                      <li key={index} className={s.item}>\n                        {item.name}\n                      </li>\n                    ))}\n                  </ul>\n                </>\n              )}\n            </div>\n          </div>\n\n          <nav>\n            <NavLink\n              to=\"cast\"\n              className={({ isActive }) => (isActive ? s.activeLink : s.link)}\n            >\n              Cast\n            </NavLink>\n            <NavLink\n              to=\"review\"\n              className={({ isActive }) => (isActive ? s.activeLink : s.link)}\n            >\n              Review\n            </NavLink>\n          </nav>\n          <Outlet />\n        </div>\n      ) : (\n        <>\n          <nav>\n            <button className={s.backBtn}>\n              <NavLink to={fromLink} className={s.backLink}>\n                ← Go Back\n              </NavLink>\n            </button>\n          </nav>\n          <ErrorView message={'Film not found'} />\n        </>\n      )}\n    </>\n  );\n}\n"],"names":["BASE_URL","KEY","IMAGE_URL","fetchWithErrorHandling","url","config","fetch","response","ok","json","Promise","reject","Error","fetchPopularFilmsForToday","fetchFilmsByKeyWord","name","fetchPrimaryInfoAboutFilm","movie_id","fetchCastForFilm","fetchReviewsForFilm","ErrorView","message","className","s","role","src","error","alt","SingleFilmsView","movieId","useParams","useState","film","setFilm","fromLink","setfromLink","location","useLocation","useEffect","then","catch","err","state","from","to","poster_path","title","vote_average","overview","release_date","genres","map","item","index","isActive"],"sourceRoot":""}